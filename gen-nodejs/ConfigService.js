//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./tutorial_types');
//HELPER FUNCTIONS AND STRUCTURES

var ConfigService_getConfig_args = function(args) {
};
ConfigService_getConfig_args.prototype = {};
ConfigService_getConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigService_getConfig_args.prototype.write = function(output) {
  output.writeStructBegin('ConfigService_getConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigService_getConfig_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.InvalidOperation) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
ConfigService_getConfig_result.prototype = {};
ConfigService_getConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.InvalidOperation();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigService_getConfig_result.prototype.write = function(output) {
  output.writeStructBegin('ConfigService_getConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigService_flushConfig_args = function(args) {
  this.paths = null;
  if (args) {
    if (args.paths !== undefined && args.paths !== null) {
      this.paths = Thrift.copyList(args.paths, [null]);
    }
  }
};
ConfigService_flushConfig_args.prototype = {};
ConfigService_flushConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.paths = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.paths.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigService_flushConfig_args.prototype.write = function(output) {
  output.writeStructBegin('ConfigService_flushConfig_args');
  if (this.paths !== null && this.paths !== undefined) {
    output.writeFieldBegin('paths', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.paths.length);
    for (var iter7 in this.paths)
    {
      if (this.paths.hasOwnProperty(iter7))
      {
        iter7 = this.paths[iter7];
        output.writeString(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigService_flushConfig_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.InvalidOperation) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
ConfigService_flushConfig_result.prototype = {};
ConfigService_flushConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.InvalidOperation();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigService_flushConfig_result.prototype.write = function(output) {
  output.writeStructBegin('ConfigService_flushConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ConfigServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ConfigServiceClient.prototype = {};
ConfigServiceClient.prototype.seqid = function() { return this._seqid; };
ConfigServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ConfigServiceClient.prototype.getConfig = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConfig();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConfig();
  }
};

ConfigServiceClient.prototype.send_getConfig = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getConfig', Thrift.MessageType.CALL, this.seqid());
  var args = new ConfigService_getConfig_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ConfigServiceClient.prototype.recv_getConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ConfigService_getConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConfig failed: unknown result');
};
ConfigServiceClient.prototype.flushConfig = function(paths, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flushConfig(paths);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flushConfig(paths);
  }
};

ConfigServiceClient.prototype.send_flushConfig = function(paths) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flushConfig', Thrift.MessageType.CALL, this.seqid());
  var params = {
    paths: paths
  };
  var args = new ConfigService_flushConfig_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ConfigServiceClient.prototype.recv_flushConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ConfigService_flushConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('flushConfig failed: unknown result');
};
var ConfigServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ConfigServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ConfigServiceProcessor.prototype.process_getConfig = function(seqid, input, output) {
  var args = new ConfigService_getConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConfig.length === 0) {
    Q.fcall(this._handler.getConfig.bind(this._handler))
      .then(function(result) {
        var result_obj = new ConfigService_getConfig_result({success: result});
        output.writeMessageBegin("getConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperation) {
          result = new ConfigService_getConfig_result(err);
          output.writeMessageBegin("getConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getConfig(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperation) {
        result_obj = new ConfigService_getConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ConfigServiceProcessor.prototype.process_flushConfig = function(seqid, input, output) {
  var args = new ConfigService_flushConfig_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flushConfig.length === 1) {
    Q.fcall(this._handler.flushConfig.bind(this._handler), args.paths)
      .then(function(result) {
        var result_obj = new ConfigService_flushConfig_result({success: result});
        output.writeMessageBegin("flushConfig", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.InvalidOperation) {
          result = new ConfigService_flushConfig_result(err);
          output.writeMessageBegin("flushConfig", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("flushConfig", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.flushConfig(args.paths, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.InvalidOperation) {
        result_obj = new ConfigService_flushConfig_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("flushConfig", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flushConfig", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
